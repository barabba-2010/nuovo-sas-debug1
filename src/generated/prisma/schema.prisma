// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String?
  password    String
  role        UserRole     @default(USER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tests       Test[] // Tests created by this user
  testResults TestResult[]
  reports     Report[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model Test {
  id           String       @id @default(uuid())
  title        String
  description  String
  instructions String       @db.Text
  category     String
  published    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  createdBy    User         @relation(fields: [creatorId], references: [id])
  creatorId    String
  questions    Question[]
  testResults  TestResult[]
  reports      Report[]

  @@map("tests")
}

model Question {
  id      String       @id @default(uuid())
  text    String       @db.Text
  type    QuestionType
  options Json? // JSON array of option objects: [{value: "1", label: "Option 1"}, ...]
  order   Int
  test    Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId  String
  answers TestAnswer[]

  @@map("questions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  SCALE
  TEXT
  TRUE_FALSE
}

model TestResult {
  id          String       @id @default(uuid())
  test        Test         @relation(fields: [testId], references: [id])
  testId      String
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  score       Int?
  completed   Boolean      @default(false)
  startedAt   DateTime     @default(now())
  completedAt DateTime?
  answers     TestAnswer[]
  report      Report?

  @@map("test_results")
}

model TestAnswer {
  id           String     @id @default(uuid())
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   String
  testResult   TestResult @relation(fields: [testResultId], references: [id], onDelete: Cascade)
  testResultId String
  value        String // The selected option value or text input

  @@map("test_answers")
}

model Report {
  id              String     @id @default(uuid())
  title           String
  summary         String     @db.Text
  analysis        Json // JSON object with analysis details
  recommendations Json // JSON array of recommendation strings
  conclusion      String     @db.Text
  test            Test       @relation(fields: [testId], references: [id])
  testId          String
  testResult      TestResult @relation(fields: [testResultId], references: [id], onDelete: Cascade)
  testResultId    String     @unique
  user            User       @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime   @default(now())
  includedGraphs  Boolean    @default(true)

  @@map("reports")
}
